@file:Suppress("UnstableApiUsage")

import java.util.Properties

plugins {
    id("com.android.library")
    kotlin("android")
    kotlin("kapt")
    `maven-publish`
    signing
}

val githubProperties = Properties().apply {
    load(rootProject.file("github.properties").inputStream())
}

android {
    namespace = "sortielab.library.fido2"
    compileSdk = Apps.compileSdk

    defaultConfig {
        minSdk = Apps.minSdk

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFile("consumer-rules.pro")
    }

    buildTypes {
        getByName("release") {
            isMinifyEnabled = true
            // 라이브러리 패키지에 아래 규칙이 함께 포함됩니다.
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro", "consumer-rules.pro"
            )
            consumerProguardFiles("consumer-rules.pro")
        }
        getByName("debug") {
            isMinifyEnabled = false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

dependencies {
    Dependencies.AndroidDefault.run {
        implementation(this.kotlinCore)
        implementation(this.appCompat)
        implementation(this.material)
        testImplementation(this.jUnit)
        androidTestImplementation(this.androidTest)
        androidTestImplementation(this.testCore)
    }

    Dependencies.AndroidRoom.run {
        implementation(this.roomRuntime)
        annotationProcessor(this.roomCompiler)
        implementation(this.roomKtx)
        kapt(this.roomCompiler)
    }

    Dependencies.Encrypt.run {
        implementation(this.bouncyCastle)
        implementation(this.securityCrypto)
        implementation(this.biometric)
    }

    Dependencies.GSON.run {
        implementation(this.jackson)
        implementation(this.gsonCore)
    }
}

// Configure the maven-publish plugin.
afterEvaluate {
    publishing {
        // This says: defer this block until all of the other stuff has run first.
        // This is required since components["release"] is generated by the Android
        // plugin in `afterEvaluate` itself, which forces us to do the same.
        publications {
            // Create a new publication called "release". The maven-publish plugin
            // creates tasks named publish${name}PublicationTo${target}, where
            // ${name} is a capitalized form of the name and ${target} is an output
            // repository. By default a MavenLocal target is automatically added,
            // which outputs to ~/.m2/repository.
            afterEvaluate {
                create<MavenPublication>("release") {
                    // Include all artifacts from the "release" component. This is the
                    // .aar file itself.

                    from(components.getByName("release"))

                    groupId = Apps.moduleGroupId
                    artifactId = Apps.moduleArtifactId
                    version = Apps.moduleVersion

                    pom {
//                        withXml {
//                            val dependenciesNode = asNode().appendNode("dependencies")
//
//                            (configurations.api.get().allDependencies + configurations.implementation.get().allDependencies).forEach {
//                                val dependencyNode = dependenciesNode.appendNode("dependency")
//                                dependencyNode.appendNode("groupId", it.group)
//                                dependencyNode.appendNode("artifactId", it.name)
//                                dependencyNode.appendNode("version", it.version)
//                            }
//                        }
                        name.set("fido2-authenticator")
                        description.set("Android Fido2 Authenticator Made By Sortielab With Saebyeol")
                        url.set("https://github.com/SortieLab/android-fido2-authenticator-lib")
                        developers {
                            developer {
                                id.set("Snorlax")
                                name.set("Hansaebyeol-Kang")
                                email.set("snorlax@sortielab.com")
                            }
                        }
                        scm {
                            url.set(pom.url.get())
                            connection.set("scm:git@${url.get()}.git")
                            developerConnection.set("scm:git@${url.get()}.git")
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GithubPackages"
                url = uri("https://maven.pkg.github.com/SortieLab/android-fido2-authenticator-lib")
                credentials {
                    username = (githubProperties["github_username"] ?: System.getenv("github_username")) as String?
                    password =
                        (githubProperties["github_access_token"] ?: System.getenv("github_access_token")) as String?
                }
            }
            maven {
                name = "CustomMavenRepo"
                url = uri("file://${buildDir}/repo")
            }
        }
    }
}